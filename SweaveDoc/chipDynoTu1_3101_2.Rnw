%% \VignetteIndexEntry{Bioconductor LaTeX Style}

\documentclass{article}

<<style, echo=FALSE, results=tex>>=
BiocStyle::latex()
@
\newcommand{\exitem}[3]{\item \texttt{\textbackslash#1\{#2\}} #3 \csname#1\endcsname{#2}.}

\title{A probabilistic dynamical model for quantitative inference of the regulatory mechanism of transcription}
\author{Guido Sanguinetti, Magnus Rattray and Neil D. Lawrence}
%%\author{Muhammad A. Rahman}

\begin{document}
\SweaveOpts{concordance=TRUE}

\maketitle

\begin{abstract}
Quantitative estimation of the regulatory relationship between transcription factors and genes is a fundamental stepping stone when trying to develop models of cellular processes. This task, however, is difficult for a number of reasons: transcription factors` expression levels are often low and noisy, and many transcription factors are post-transcriptionally regulated. It is therefore useful to infer the activity of the transcription factors from the expression levels of their target genes.
\end{abstract}

\tableofcontents

\section{Installing the \Biocpkg{chipDyno} package}
The recommended way to install the \Bioconductor{} package \Biocpkg{chipDyno} is to use the \Rfunction{biocLite} function available in the \Bioconductor{} website. This way of installation should ensure that all the dependencies are met.

\begin{verbatim}
    > source ("www.//bioconductor.org/chipDyno.R")
    > biocLite("chipDyno")
\end{verbatim}

%%To determine the gene specific transcription factor activity of C. Elegans we have followd Sanguinetti's probabilistic dynamic model ~\cite{sanguinetti:01} for quantative inference.

\section{Loading the package and getting help}
The first step in any \Biocpkg{chipDyno} analysis is to load the package. This package can be loaded when the \R{} console is ready. At the \R{} console type the following command:

\begin{verbatim}
    > library("chipDyno")
\end{verbatim}

Command \Rfunction{help} can be used to get help on any function. For example, to get help on the \Rfunction{chipDynoLikeStatGrad} type the following (both of them have the similar output):

\begin{verbatim}
    > help(chipDynoLikeStatGrad)
    > ?chipDynoLikeStatGrad
\end{verbatim}


\section{Input data and preparations}
If the data is in Affymetrix CEL files then it may required to do some preprocessing. This CEL files can be extracted using the bioconductor package \Biocpkg{puma} ~\cite{puma}. \Biocpkg{puma} usually stores the point expression in \file{*\_exprs.csv} file and defferent levels of uncertainties in \file{*\_se.csv} files as Comma-separated values.

Load the point expression levels data and it corresponding uncertainty. Here the data was stored in a simple text file %\file{YeastMetabolism_exprs.txt} and \file{YeastMetabolism_se.txt} respectively.

<<echo=TRUE>>=
rm(list=ls())
source("/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/chipDynoLoadModules.R")
file_data <- 
  "/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/data/MetabolData/YeastMetabolism_exprs.txt";
file_vars <- 
  "/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/data/MetabolData/YeastMetabolism_se.txt";
data = as.matrix(read.table(file_data))
data[1:5,1:8]
vars=as.matrix(read.table(file_vars))
vars[1:5,1:8]
@

These differentially expressed data and its uncertainty doesn't contain any genes name or problem ID number. The gene Names and its corresponding  problem IDs can be extracted from other two source (?) dictionary.txt and probeIDTu.txt.

<<echo=TRUE>>=
file_dictionary <- 
  "/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/data/MetabolData/dictionary.txt";
dictionary <- read.table(file_dictionary, header = FALSE, sep = "\t", 
    		quote = "", dec = ".", col.names=c("IDs_temp", "ORF", 
				"ORF_temp","geneCN_temp"), na.strings = "NA", 
				colClasses = NA, nrows = -1, skip = 0, check.names = TRUE, 
				fill = TRUE, strip.white = FALSE, blank.lines.skip = FALSE, 
				comment.char = "#", allowEscapes = FALSE, flush = FALSE)
IDs= matrix(dictionary$IDs_temp,,1)
ORF= matrix(dictionary$ORF,,1) 

file_probeIDTu <- 
  "/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/data/MetabolData/probeIDTu.txt";
probeIDTu <- read.table(file_probeIDTu, sep=" ", fill= TRUE, col.names=c("IDSn"))
IDSnew <- matrix(probeIDTu$IDSn,,1)
@


%In our experimental data set there was 3 replication of the same experiment with 5 experimental time points with different environmental conditions. So there was (3x5=) 15 time points. We will to reorganize this datapoint maintaining the time series for different experiment. For our this example we will consider the data obtained from the second experiment.

%Load the the standard errors. The ~\cite{puma} package creates many files with different percentile of posterior destribution we can choose anyone based on our requirement. Here as well we are considering the second experiment

The connectivity contains the evidence of connectivity between a gene and a transcription factor. \Rcode{Connectivity2.txt} file depicts the relation between 6229 genes and 204 transcription factors.  Load the connectivity file.
<<echo=TRUE>>=
file_dataChip <- 
  "/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/data/Connectivity2.txt";
dataChip=as.matrix(read.table(file_dataChip))
@

From the annotation file we can find the gene names present in the connectivity information. Load the annotation file. % For annotation we used ~\cite{celegans:db}.
<<echo=TRUE>>=
file_annotation <- 
  "/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/data/annotations2.txt"
probe_anno <- read.table(file_annotation, header = FALSE, sep = "\t", quote = "", 
                         dec = ".", col.names=c("prob", "anno"), na.strings = "NA", 
                         colClasses = NA, nrows = -1, skip = 0, check.names = TRUE, 
                         fill = TRUE, strip.white = FALSE, blank.lines.skip = FALSE, 
                         comment.char = "#", allowEscapes = FALSE, flush = FALSE)
probeName2=matrix(probe_anno$prob,,1) 
annota=matrix(probe_anno$anno,,1)
@

The list of transcription factors present in the connectivity information can be found from the file %Trans_Names2.txt . Load the file.   

<<echo=TRUE>>=
file_transNames <- 
  "/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/data/Trans_Names2.txt"
TransNames_tab <- read.table(file_transNames, header = FALSE, sep = "\t", quote = "", 
                             dec = ".", col.names=c("TN"), na.strings = "NA", 
                             colClasses = NA, nrows = -1, skip = 0, check.names = TRUE, 
                             fill = TRUE, strip.white = FALSE, blank.lines.skip = FALSE,
                             comment.char = "#", allowEscapes = FALSE, flush = FALSE)
TransNames = matrix(TransNames_tab$TN,,1)
@

In our experimental data set there are some genes for which the measurement of uncertainty is zero(i.e. vars[3,]). We would like to exclude those data.
<<echo=TRUE>>=
zeroValueRow = which(rowSums(vars)==0)
data = data[-zeroValueRow, ]
vars = vars[-zeroValueRow, ]
probeName = ORF # Rename ORF
probeName = matrix(probeName[-zeroValueRow, ],,1)
@

All the genes represent the connectivity information with the transcription factors might not present in the differentially expressed data set. We will like to exclude those genes. The following segment of code will exclude those genes. We will also exclude the redundant genes, their point expression data and uncertainty levels.
<<echo=TRUE>>=
noOfprobe=nrow(probeName)
redundancy=matrix(mat.or.vec(noOfprobe,1),,1)
redundancy[,]=1
index=matrix(mat.or.vec(nrow(dataChip),1),,1)

for (i in 1: nrow(probeName2)){
	vec <- probeName==probeName2[i,1]
	index[i]=colSums(vec)
	if(index[i]>1){
		pippo=(which(vec))
		redundancy[pippo[2:length(pippo)]]=0
		}
	}

dataChip=dataChip[which(index!=0),]
annota=annota[which(index!=0),]
probeName2=probeName2[which(index!=0),]
probeName2=matrix(probeName2,,1)

probeName=probeName[which(redundancy!=0),]
probeName=matrix(probeName,,1)

data=data[which(redundancy!=0),]
vars=vars[which(redundancy!=0),]
@

Again all the genes have the differentially expressed data may not have the connectivity information with the transcription factors. We will exclude those genes as well. We will also organize the genes connectivity information based on the differentially expressed genes index. So that in both data set (points expressions with uncertainty and connectivity information) have the common genes and aligned with the same index.

<<echo=TRUE>>=
preX=NULL
annotation=NULL
index=mat.or.vec(nrow(data),1)
for (i in 1: nrow(data)){
	index[i]=sum(probeName[i]==probeName2)
	if (index[i]==1)		
		preX=rbind(preX,dataChip[which(probeName[i]==probeName2),])
		annotation=rbind(annotation,annota[which(probeName[i]==probeName2)])
}

data= data[which(index==1),]
vars= vars[which(index==1),]
probeName= probeName[which(index==1),]
probeName=matrix(probeName,,1)
@

The connectivity matrix between genes and the transcription factors is a binary matrix. If there is an evidence that a gene is transcribed by a transcription factor or, a transcription factor is transcribing some other genes then the relation will be 1, the value will be 0 otherwise. We binarized the matrix by giving a value based on the suggestion of ~\cite{lee:01} when the associated p-value is less than 0.0001.
<<echo=TRUE>>=
X= mat.or.vec(nrow(preX),ncol(preX))
I <- c(which(preX<1e-3))
X[I] =1
@

In the experimental dataset there might have some genes which are not transcribing by any of the given transcription factors, again there might have some transcription factors which are not transcribing any of the present genes. We will exclude those genes and transcription factors.
<<echo=TRUE>>=
fakeX = rowSums(X)
X=X[which(fakeX!=0),]
annotation=annotation[which(fakeX!=0),]
annotation = matrix(annotation,,1)

effectX=colSums(X)
TransNames=TransNames[which(effectX!=0),]
TransNames=matrix(TransNames,,1)
X=X[,which(effectX!=0)]; X[201:207,16:30]
data= data[which(fakeX!=0),]; data[1:5,1:7]
vars= vars[which(fakeX!=0),]; vars[1:5,1:7]
@

Define some variables-
<<echo=TRUE>>=
nGenes= nrow(data) # Number of genes will be present in our experiment
npts= ncol(data) # Number of time points
nTrans = ncol(X) # Number of TF will be present in our experiment
muIn = array(0, dim <-c(nTrans,1)); 
annotations = annotation # Both of the variavle contain the same data
transNames = TransNames # Both of the variavle contain the same data
@

\section{Reduce Variables}
The connectivity matrix is a sparse matrix. Using \Rfunction{chipReduceVariables} we can find the same length integer vectors having the row indices, column indices, the values of the non-zero entries of the sparce matrix, and the number of effective genes
<<echo=TRUE>>=
R_C_V_nEffectGenes = chipReduceVariables(X);
R = R_C_V_nEffectGenes[[1]]; R[1:10]
C = R_C_V_nEffectGenes[[2]]; C[1:10]
V = R_C_V_nEffectGenes[[3]]; V[1:10]
nEffectGenes = R_C_V_nEffectGenes[[4]]; nEffectGenes
@

Initialize some variables-
<<echo=TRUE>>=
diagonal = array(0.5, dim <- c(1,nTrans))
precs_mat = array(1, dim <- c(nrow(vars),ncol(vars)))
precs = precs_mat/(vars^2)
beta=3;
gamma=pi/4;
params=matrix(c(beta,gamma,t(muIn),0.1*t(V), diagonal),1,)
@

\section{Likelihood Optimization}
We choose to optimize the likelihood using scaled conjugate gradient algorithm implement in \Rcode{Netlab} ~\cite{nabney:01}. 

<<echo=TRUE>>=
options = array(0, dim <- c(1,18))
options[1]=1; #display error values
options[2]=0.0001 # measure of the absolute precision
options[3]=0.0001  #objective function values between two successive steps to satisfy condition
options[14]= 2000  # maximum number of iterations
#options[17]=0.1 
@

Optimize all the parameters using scaled conjugate gradient algorithm. This process is time consuming. The following line of command may take several hours to run. Here we can reduce the number of iteration to speed up the process and later we will load some optimized data. Figure. ~\ref{valMin} shows the mean value of the transcription factors activity.

<<echo=TRUE>>=
options[14]= 3 # Number if iteration; only for trial purpose.
#params = SCGoptimNoise(params, options, data, precs, X, nEffectGenes, R, C)
@

Load the optimized value-
<<echo=TRUE>>=
source("/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/chipDynoLoadModules.R")
load("/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/ResultsTu_New_10000Ita_Lovelace.RData")
V=params[(3+nTrans):(length(params)-nTrans)]
preSigma <- as.matrix(sparseMatrix(R, C, x=V, dims = c(nEffectGenes,nTrans)))
diagonal = params[(length(params)-nTrans+1) :(length(params))];
Sigma = t(preSigma)%*%preSigma + diag(diagonal*diagonal)
beta = params[1]
gamma = params[2]
mu = params[3:(2+nTrans)]
#save.image("ResultsTu_test.RData") # To save the data 
@

\begin{figure}
<<figure1, fig=TRUE>>=
plot(mu, type='s', col='red', xlab= "Transcription Factors", ylab= "Mean Value")
@
\caption{Mean}
\label{valMin}
\end{figure}

%\begin{figure}
%<<figure2, fig=TRUE, height=3, width= 3>>=
%#image(Sigma[1:40,1:40])
%heatmap(Sigma[1:30,1:30], Rowv=NA, Colv=NA, col = heat.colors(256),  margins=c(2,2))
%@
%\caption{Sigma[1:40,1:40]}
%\label{valSigma}
%\end{figure}

%---------------------------------------------------------
\section{Computation of posterior expectations for a given gene and TF}
%---------------------------------------------------------
\Rfunction{chipDynoStatPostEst} and \Rfunction{chipDynoStatPostEstNoise} computes posterior expectations of transcription factor activity for a transcription factor and a gene given the uncertainty of the expression level is absent or present respectively.

<<echo=FALSE>>=
# FORMAT chipDynoStatPostEstNoise <- function(data,x,Sigma,beta,precs,gamma,mu)
# DESC computes posterior expectations considering 
# uncertainty of the expression level
# ARG data : point estimate of the expression level
# ARG x : connectivity measurement between genes and transcription factors
# ARG Sigma : prior covariance matrix of TFA
# ARG beta :
# ARG precs : uncertainty of the expression level
# ARG gamma : degree of temporal continuity
# ARG mu : mean value of the transcription factor activity
# RETURN expectations: A list of posterior expected mean, error and error difference
# SEEALSO : chipDynoStatPostEst
@

<<>>=
#rm(list=ls())
load("/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/ResultsTu_New_10000Ita_Lovelace.RData")
source("/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/chipDynoLoadModules.R")
annotations = annotation
transNames=TransNames
transName= "ACE2"
geneName="YHR143W"
#geneName="KRE32"

npts=ncol(data);
nTrans=ncol(X);
c = class(geneName)
v= mat.or.vec(length(annotations),1)

if (c == 'character'){
  for (i in 1: nrow(annotations)) { 
		v[i] <- geneName==annotations[i,1]
		}
	x=data.matrix(X[which(v==1),])
	data=t(data[which(v==1),])
	precs = precs[which(v==1),]

} else if (c=='integer'){
	x=data.matrix(X[geneName,])
	data=data[geneName,]
	precs=precs[geneName,] ### t() ???

} else {
	print('Error: Genes can be identified either by number or name')
}

expectations=chipDynoStatPostEstNoise(data,x,Sigma,beta,precs,gamma,mu);
expectations.b=expectations[[1]];
expectations.tfError=expectations[[2]];
expectations.tfErrorDiffs=expectations[[3]];

index=which(transName==transNames);
if (x[index,]== 0) {
 print('Error: The gene selected is not a target of the transcription factor')
}

tf=expectations.b[,index];
ind=which(transName == transNames[which(x!=0)]);
tfErrors=expectations.tfError[,ind];
tfErrorsDiffs=expectations.tfErrorDiffs[,,ind];
tf
tfErrors
@

%\begin{figure}
%<<figure3, fig=TRUE>>=
%par(mfcol=c(1,3))
%image(Z, col=pal.1(100))
%image(expectations.tfErrorDiffs[,,ind], col = heat.colors(50))
%heatmap(expectations.tfErrorDiffs[,,2])
%@
%\caption{Covariance Matrix}
%\label{Cov_image}
%\end{figure}

%---------------------------------------------------------
\section{Posterior expectations for a given TF : chipDynoExpectationsFastNoise}
%---------------------------------------------------------
\Rfunction{chipDynoExpectationsFast} and \Rfunction{chipDynoExpectationsFastNoise} computes posterior expectations of transcription factor activity for a given transcription factor considering uncertainty of the expression level  absent or present respectively. These functions first find all the genes gegulated by geven transcription factor and later the activity on different genes. The format of the function and arguments are-

<<echo=FALSE>>=
# FORMAT chipDynoExpectationsFastNoise <- function(data, X, Sigma, beta, 
#  		precs, gamma,mu, transNames, annotations, transName, geneName)
# DESC computes posterior expectations of TFA considering uncertainty of the expression level.
# ARG data : point estimate of the expression level
# ARG X : connectivity measurement between genes and transcription factors
# ARG Sigma : prior covariance matrix of TFA
# ARG beta :
# ARG precs : uncertainty of the expression level
# ARG gamma : degree of temporal continuity
# ARG mu : mean value of the transcription factor activity
# ARG TransNames : Transcription factors
# ARG annotations : Gene names
# ARG transName : specific transcription factor
# ARG geneName : specific gene name
# RETURN expectations : A list of gene specific transcription 
# factor activity, error in gene specific transcription factor activity 
# and corresponding difference in error
# SEEALSO : chipDynoExpectationsFast
@

<<echo=FALSE>>=
rm(list=ls())
load("/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/ResultsTu_New_10000Ita_Lovelace.RData")
source("/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/chipDynoLoadModules.R")
transNames = TransNames
annotations = annotation

nTrans=nrow(TransNames);
lst=list();
newX=array(0, dim <-c(dim(X)));
newXVals=array(0, dim <-c(dim(X)));
#i=2 # ACE2 for demSpellman
#i= 4; name=TransNames[i,] #for demTu
name= "ACE2" # Name of the given transcription factor

index=which(name == transNames);
genesIn=which(X[,index]!=0);
anno=annotations[which(X[,index]!=0)];
nTargets=length(anno);
npts=ncol(data);
TF=array(0, dim=c(nTargets,npts));
TFError=array(0, dim=c(nTargets,npts));
TFErrorDiff=array(0, dim=c(npts,npts,nTargets));

#plot Errorbar Function
plotErrorBar <- function(y,SE, gnName){

add.error.bars <- function(x,y,SE,w,col=1){
x0 = x; y0 = (y-SE); x1 =x; y1 = (y+SE);
arrows(x0, y0, x1, y1, code=3,angle= 90,length=w,col=col);
}
 x <- c(1:length(y));
 plot(x,y, type = 'l', col='green4', las=1, xlab="time", ylab="TFA", 
      main=bquote("Gene : " ~ .(gnName)));
 add.error.bars(x,y,SE,0.05,col='red');
 }
@

\begin{figure}
<<figure4, fig=TRUE>>=
M <- matrix(c(rep(1:4)), byrow=TRUE, nrow=2) # Choose the position by matrix setting!
layout(M) 
k <- c(46,47,50,52)
#for (i in 1:4){
for (i in k){
#expectations = chipDynoExpectationsFast(data,X,Sigma,beta,gamma,mu, 
#                    transNames, annotations, name, genesIn[i]);
expectations = chipDynoExpectationsFastNoise(data,X,Sigma,beta,precs, 
                    gamma,mu, transNames, annotations, name, genesIn[i]);
TF[i,] = expectations[[1]];
TFError[i,] = expectations[[2]];
gnName=annotation[genesIn[i]]
plotErrorBar(TF[i,],TFError[i,], gnName)
}
@
\caption{TFA Activities}
\label{TFA_activiitys}
\end{figure}
%...................................

<<echo=TRUE>>=
rm(list=ls())
load("ResultsSpellman_200Ita.RData")
#load("/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/ResultsTu_New_10000Ita_Lovelace.RData")
source("/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/chipDynoLoadModules.R")
transNames = TransNames
annotations = annotation

nTrans=nrow(TransNames);
lst=list();
newX=array(0, dim <-c(dim(X)));
newXVals=array(0, dim <-c(dim(X)));
 
#i=2; name=TransNames[i,] # ACE2 for demSpellman

name="ACE2"
 
index=which(name == transNames);
genesIn=which(X[,index]!=0);
anno=annotations[which(X[,index]!=0)];
nTargets=length(anno);
npts=ncol(data);
TF=array(0, dim=c(nTargets,npts));
TFError=array(0, dim=c(nTargets,npts));
TFErrorDiff=array(0, dim=c(npts,npts,nTargets));

plotErrorBar <- function(y,SE, gnName){
 
add.error.bars <- function(x,y,SE,w,col=1){
 x0 = x; y0 = (y-SE); x1 =x; y1 = (y+SE);
 arrows(x0, y0, x1, y1, code=3,angle= 90,length=w,col=col);
 }
 
x <- c(1:length(y));
plot(x,y, type = 'l', col='green4', las=1, xlab="time", ylab="TFA", 
      main=bquote("Gene : " ~ .(gnName)));
add.error.bars(x,y,SE,0.05,col='red');
}
@

\begin{figure}
<<figure5, fig=TRUE>>=
M <- matrix(c(rep(1:4)), byrow=TRUE, nrow=2) # Choose the position by matrix setting!
layout(M) 
k <- c(17,19, 28, 50)
#for (i in 8:11){
for (i in k){
expectations = chipDynoExpectationsFast(data,X,Sigma,beta,gamma,mu, transNames, annotations, name, genesIn[i]);
#expectations = chipDynoExpectationsFastNoise(data,X,Sigma,beta,precs, gamma,mu, transNames, annotations, name, genesIn[i]);
TF[i,] = expectations[[1]];
TFError[i,] = expectations[[2]];
gnName=annotation[genesIn[i]]

plotErrorBar(TF[i,],TFError[i,], gnName)
}
@
\caption{TFA Activities of ACE2}
\label{TFA_activities_ACE2}
\end{figure}

%---------------------------------------------------------
\section{Maximum Transcription Factor Activity}
%---------------------------------------------------------
\Rfunction{chipDynoMaxDiff} computes the maximum transcription factor activity of all the target or transcribed genes for a given transcription factor. For a specific target it also computes the variation over time.

<<echo=FALSE>>=
# CHIPDYNOMAXDIFF computes most significant changes in TFAs
# CHIPDYNO toolbox
# chipDynoMaxDiff.R version 1.0.1
# FORMAT chipDynoMaxDiff <- function(TF,TFErrorDiff)
# DESC computes most significant changes in TFAs
# ARG TF: gene specific transcription factor activity
# ARG TFErrorDiff: error in gene specific transcription factor activity
# RETURN f : most significant changes in TFAs
# SEEALSO : chipDynoExpectationsFast, chipDynoExpectationsFastNoise
@

<<echo=TRUE>>=
rm(list=ls())
load("/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/ResultsTu_New_10000Ita_Lovelace.RData")
source("/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/chipDynoLoadModules.R")
transNames = TransNames
annotations = annotation

nTrans=nrow(TransNames);
lst=list();
newX=array(0, dim <-c(dim(X)));
newXVals=array(0, dim <-c(dim(X)));
i=6; # TransNames[6,] is "AFT2"
expectations =chipDynoTransFactNoise(data,X,Sigma,beta,precs, gamma, mu, 
  					TransNames, annotation, TransNames[i,]);
TF = expectations[[1]]
TFError = expectations [[2]]
TFErrorDiff = expectations [[3]]

maxVars=chipDynoMaxDiff(TF,TFErrorDiff);
#maxVars
@

<<echo=FALSE>>=
nTargets=nrow(TF);
npts=ncol(TF);
preDiffs=array(0, dim <- c(npts,npts));
diffs=array(0, dim <- c(npts,npts,nTargets));
f= array(0, dim <- c(1,nTargets));

for (i in 1: nTargets) {
  for (j in 2:(npts-1)) {
		for (l in j : npts) {
			preDiffs[j,l]=TF[i,j]-TF[i,l];
		}
	}
	diffs[ , ,i] = preDiffs - t(preDiffs);
	f[i]=max(diffs[,,i]/TFErrorDiff[,,i]);  ## ?? ./
}
@

\begin{figure}
<<figure6, fig=TRUE>>=
par(mfrow=c(2,2))
image(diffs[,,1],col = heat.colors(50), main = "Target 1: Variation over time ")
image(diffs[,,4],col = heat.colors(50), main = "Target 4: Variation over time ")
image(TFErrorDiff[,,4], col = heat.colors(50), main = "TF Error difference for Target 4")
image((diffs[,,4]/TFErrorDiff[,,4]), col = heat.colors(50), main = "diffs/TFErrorDiff")
@
\caption{Error Difference}
\label{Error_Diff}
\end{figure}


%---------------------------------------------------------
\section{TFAs with error bars :chipDynoTransFactNoise}
%---------------------------------------------------------
\Rfunction{chipDynoTransFactNoise} provides transcription factor activities with error margin for a given transcription factor. For an example we are interested to find the activity of transcription factor \Rcode{ACE2}. Using \Rfunction{chipDynoTransFactNoise} we can find it by following way-

<<echo=FALSE>>=
# FORMAT chipDynoTransFactNoise <- function(data, X, Sigma, beta, precs, 
#  								gamma, mu, transNames, annotations, name)
# DESC given a transcription factor, provides gene-specific TFAs with errorbars.
# ARG data : point estimate of the expression level
# ARG X : connectivity measurement between genes and transcription factors
# ARG Sigma : prior covariance matrix of TFA
# ARG beta :
# ARG precs : uncertainty of the expression level
# ARG gamma : degree of temporal continuity
# ARG mu : mean value of the transcription factor activity
# ARG transNames : Transcription factors
# ARG annotations : Gene names
# ARG name : given transcription factor name
# RETURN expectations : concatenated dataframe of transcription factor 
# activity and its error
# SEEALSO : chipDynoTransFact
@

<<echo=TRUE>>=
rm(list=ls())
load("/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/ResultsTu_New_10000Ita_Lovelace.RData")
#load("/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/ResultsTu.RData")
source("/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/chipDynoLoadModules.R")
i=4; TransNames[i,]
expectations =chipDynoTransFactNoise(data,X,Sigma,beta, precs, gamma, mu,
                                     TransNames, annotation, TransNames[i,]);
TransNames[i,] # Name of the transcription factor
expectations[[1]][1:5,1:5] # Transcription facot activity on different genes
expectations[[2]][1:5,1:5] # Transcription facot activity error on different genes
#expectations[[2]]
@


%---------------------------------------------------------
\section{Significantly varying TFs :chipDynoActTransFactNoise}
%---------------------------------------------------------
\Rfunction{chipDynoActTransFact} and \Rfunction{chipDynoActTransFactNoise} can find out transcription factor activity for all the transcription factors without or with uncertainty of expression level respectively 

<<echo=FALSE>>=
# CHIPDYNOACTTRANSFACTNOISE identifies significantly varying TFs with uncertainty of
# expression level.
# CHIPDYNO toolbox
# chipDynoActTransFactNoise.R version 1.1
# FORMAT chipDynoActTransFactNoise <- function (data,X,Sigma,beta, precs, gamma,mu,
#                                         TransNames, annotation,sigLev)
# DESC identifies significantly varying TFs.
# ARG data : point estimate of the expression level
# ARG X : connectivity measurement between genes and transcription factors
# ARG Sigma : prior covariance matrix of TFA
# ARG beta :
# ARG precs : uncertainty of the expression level 
# ARG gamma : degree of temporal continuity
# ARG mu : mean value of the transcription factor activity
# ARG TransNames : Transcription factors
# ARG annotation : Gene names
# ARG sigLev : threshold value
# RETURN f : concatenated dataframe of list of regulators for a specific gene,
# its index and values
# COPYRIGHT : Neil D. Lawrence, 2006
# COPYRIGHT : Guido Sanguinetti, 2006
# MODIFICATIONS : Muhammad A. Rahman, 2013
# SEEALSO : chipDynoTransFact, chipDynoTransFactNoise, chipDynoActTransFact
@


<<echo=TRUE>>=
rm(list=ls())
load("/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/ResultsTu_New_10000Ita_Lovelace.RData")
source("/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/chipDynoLoadModules.R")

nTrans=nrow(TransNames);
lst=list();
newX=array(0, dim <-c(dim(X)));
newXVals=array(0, dim <-c(dim(X)));
i=1
expectations =chipDynoTransFactNoise(data,X,Sigma,beta,precs, gamma, mu, 
  					TransNames, annotation, TransNames[i,]);
expectations[[1]][1:5,1:5] # Transcription Factor activity
expectations[[2]][1:5,1:5] # Transcription Factor activity error
expectations[[3]][1:5,1:5,1] # Transcription Factor activity error difference
@


%---------------------------------------------------------
\section{Given Gene: lists activators in decreasing order}
%---------------------------------------------------------
For a given gene we can find out the list of activators using the function \Rfunction{chipDynoGeneActNoise}. It will list all the activators in decreasing order with transcription factor activity and activity error.

<<echo=FALSE>>=
# CHIPDYNOGENEACTNOISE given a gene, lists activators in decreasing order
# CHIPDYNO toolbox
# chipDynoGeneActNoise.R version 1.0.1
# FORMAT chipDynoGeneAct <- function(data, X, Sigma,beta,precs, gamma,mu, 
#  				transNames, annotation, geneName);
# DESC given a gene, lists activators in decreasing order
# ARG data : point estimate of the expression level
# ARG X : connectivity measurement between genes and transcription factors
# ARG Sigma : prior covariance matrix of TFA
# ARG beta :
# ARG precs :
# ARG gamma : degree of temporal continuity
# ARG mu : mean value of the transcription factor activity
# ARG transNames : Transcription factors
# ARG annotation : Gene names
# ARG geneName : specific gene name
# RETURN list : concatenated data frame of lists activators for a given gene 
# in decreasing order, maximum activity and maximum activity error
# COPYRIGHT : Neil D. Lawrence, 2006
# COPYRIGHT : Guido Sanguinetti, 2006
# MODIFICATIONS : Muhammad A. Rahman, 2013
# SEEALSO : chipDynoGeneAct, chipDynoActTransFact, chipDynoActTransFactNoise
@

<<echo=TRUE>>=
rm(list=ls())
load("/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/ResultsTu_New_10000Ita_Lovelace.RData")
source("/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/chipDynoLoadModules.R")
geneName="YHR143W"; 
#geneName="AGA1"; 
transNames=TransNames
activators = chipDynoGeneActNoise(data, X, Sigma, beta, precs, gamma,mu, 
                    transNames, annotation, geneName)
activators[[1]] # List of activators
activators[[2]] # Maximum transcription factor activity
activators[[3]] # Maximum transcription factor activity error
@


%---------------------------------------------------------
%\section{Sectioning: this is a section}
%---------------------------------------------------------

%\subsection{This is a subsection}
%!!!!!!!!!!

%\subsubsection{This is a subsubsection}
%?@?@?@? 
%---------------------------------------------------------
%\section{Including a figure}
%---------------------------------------------------------


%---------------------------------------------------------
\section{Session info}
%---------------------------------------------------------
Here is the output of \Rfunction{sessionInfo} on the system on which
this document was compiled:
<<sessionInfo, results=tex, print=TRUE>>=
toLatex(sessionInfo())
@


%\bibliographystyle{abbrv}
%\bibliographystyle{alpha}
\bibliographystyle{apalike}

\bibliography{bib_chipDyno}

\end{document}