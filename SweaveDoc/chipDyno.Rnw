%% \VignetteIndexEntry{Bioconductor LaTeX Style}

\documentclass{article}

<<style, echo=FALSE, results=tex>>=
BiocStyle::latex()
@
\newcommand{\exitem}[3]{\item \texttt{\textbackslash#1\{#2\}} #3 \csname#1\endcsname{#2}.}

\title{A probabilistic dynamical model for quantitative inference of the regulatory mechanism of transcription}
\author{Guido Sanguinetti, Magnus Rattray and Neil D. Lawrence}
%%\author{Muhammad A. Rahman}

\begin{document}
\SweaveOpts{concordance=TRUE}

\maketitle

\begin{abstract}
Quantitative estimation of the regulatory relationship between transcription factors and genes is a fundamental stepping stone when trying to develop models of cellular processes. This task, however, is difficult for a number of reasons: transcription factors` expression levels are often low and noisy, and many transcription factors are post-transcriptionally regulated. It is therefore useful to infer the activity of the transcription factors from the expression levels of their target genes.
\end{abstract}

\tableofcontents

\section{Installing the \Biocpkg{chipDyno} package}
The recommanded way to install the \Bioconductor{} package \Biocpkg{chipDyno} is to use the \Rfunction{biocLite} function available in the \Bioconductor{} website. This way of installation should ensure that all the dependencies are met.

\begin{verbatim}
    > source ("www.//bioconductor.org/chipDyno.R")
    > biocLite("chipDyno")
\end{verbatim}

%%To determine the gene specific transcription factor activity of C. Elegans we have followd Sanguinetti's probabilistic dynamic model ~\cite{sanguinetti:01} for quantative inference.

\section{Loading the package and getting help}
The first step in any \Biocpkg{chipDyno} analysis is to load the package. This package can be loaded when the \R{} console is ready. At the \R{} console type the following command:

\begin{verbatim}
    > library("chipDyno")
\end{verbatim}

Command \Rfunction{help} can be used to get help on any function. For example, to get help on the \Rfunction{chipDynoLikeStatGrad} type the following (both of them have the similar output):

\begin{verbatim}
    > help(chipDynoLikeStatGrad)
    > ?chipDynoLikeStatGrad
\end{verbatim}

\section{Input data and preparations}
If the data is in Affymetrix CEL files then it may requered to do some preprocessing. This CEL files can be extracted using the bioconductor package \Biocpkg{puma} ~\cite{puma}. \Biocpkg{puma} usually stores the point expressione in \file{*\_exprs.csv} file and defferent levels of unicertainities in \file{*\_se.csv} files as Comma-separated values.

Load the point expression levels data. Here the data was stored in comma-seperated value (csv) file.

<<echo=TRUE>>=
data_file = 
  "/home/muhammad/Dropbox/CElegans/cluster/3exp_15dp_After_meeting/eset_cElegans_exprs.csv"
data_file
data_dictionary <- read.table(data_file, header = TRUE, sep = ",", quote = "", 
                    dec = ".", , na.strings = "NA", colClasses = NA, nrows = -1, skip = 0, 
                    check.names = TRUE, fill = TRUE, strip.white = FALSE,  
                    blank.lines.skip = TRUE, comment.char = "#", 
                    allowEscapes = FALSE, flush = FALSE)
data_dictionary[is.na(data_dictionary)] <- 0
probeId = data_dictionary[,1]
as.matrix(probeId[1:7],,1)
@

In our experimental data set there was 3 replication of the same experiment with 5 experimental time points with different environmental conditions. So there was (3x5=) 15 time points. We will to reorganize this datapoint maintaining the time series for different experiment. For our this example we will consider the data obtained from the second experiment.

<<echo=TRUE>>=
data = data_dictionary[,2:ncol(data_dictionary)]
data_sample1 <- cbind(data[,10],data[,1],data[,4],data[,7],data[,13])
data_sample2 <- cbind(data[,11],data[,2],data[,5],data[,8],data[,14])
data_sample3 <- cbind(data[,12],data[,3],data[,6],data[,9],data[,15])
data = data_sample2
data_sample2[1:7, 1:5]
@

Load the the standard errors. The ~\cite{puma} package creates many files with different percentile of posterior destribution we can choose anyone based on our requirement. Here as well we are considering the second experiment

<<echo=TRUE>>=
vars_file = 
  "/home/muhammad/Dropbox/CElegans/cluster/3exp_15dp_After_meeting/eset_cElegans_se.csv"

vars_dictionary <- read.table(vars_file, header = TRUE, sep = ",", quote = "", 
                  dec = ".", , na.strings = "NA", colClasses = NA, nrows = -1, skip = 0, 
                  check.names = TRUE, fill = TRUE, strip.white = FALSE, 
                  blank.lines.skip = TRUE, comment.char = "#", 
                  allowEscapes = FALSE, flush = FALSE)
vars_dictionary[is.na(vars_dictionary)] <- 0
vars = vars_dictionary[,2:ncol(vars_dictionary)]
vars_sample1 <- cbind(vars[,10],vars[,1],vars[,4],vars[,7],vars[,13])
vars_sample2 <- cbind(vars[,11],vars[,2],vars[,5],vars[,8],vars[,14])
vars_sample3 <- cbind(vars[,12],vars[,3],vars[,6],vars[,9],vars[,15])
vars = vars_sample2 # Choose the sample
vars_sample2[1:7, 1:5]
@

Load the annotation file. From this annotation file we can find the gene names for corresponding probe Set ID. For annotation we used ~\cite{celegans:db}.

<<echo=TRUE>>=
annotation_file = "/home/muhammad/Dropbox/CElegans/annotation.txt"
anno_dictionary <- read.table(annotation_file, header = FALSE, sep = "\t", quote = "", 
                  dec = ".", , na.strings = "NA", colClasses = NA, nrows = -1, skip = 0, 
                  check.names = TRUE, fill = TRUE, strip.white = FALSE, 
                  blank.lines.skip = TRUE, comment.char = "#", 
                  allowEscapes = FALSE, flush = FALSE)
probeId2 = anno_dictionary[,1]
geneName = anno_dictionary[,2]
probeId=as.matrix(probeId,,1) # Probe set ID from experimental data
probeId2=as.matrix(probeId2,,1) # Probe set ID from annotation file
geneName=as.matrix(geneName,,1)
geneName[1:7]
@

Remove the genes which expression level data at any time point is missing-

<<echo=TRUE>>=
index=array(0, dim<-c(nrow(data),1))
for (i in 1: nrow(data)){
  vec <- probeId[i]==probeId2
	index[i]=colSums(vec)
}
probeId=probeId[which(index!=0),];
data=data[which(index!=0),];
vars=vars[which(index!=0),];
@

For gene specific transcription factor activity we have consider the probablistic functional gene network Wormnet ~\cite{wormnet:01} and ~\cite{wormnet:02}. We have constructed a connectivity matrix where the columns represents the transcription factors and rows are the genes. For any element $(i,j)$ of the connectivity matrix, if any transcription factor $j$ can bind any specific gene $i$ the value will be one, zero otherwise.

<<echo=TRUE>>=
connectivity_file = 
  "/home/muhammad/Dropbox/CElegans/Connectivity/connectivity_matHS_LC.txt"

connectivity <- read.table(connectivity_file, header = FALSE, sep = ",", dec = ".", 
                na.strings = "NA", colClasses = NA, nrows = -1, skip = 0, 
                check.names = TRUE, fill = TRUE, strip.white = FALSE,  
                blank.lines.skip = TRUE, comment.char = "#", 
                allowEscapes = FALSE, flush = FALSE)

probeId3 = as.matrix(connectivity[,1],,1) # Probe ID from connectivity files
dataChip = connectivity[,2:ncol(connectivity)]
dataChip[is.na(dataChip)] <- 0
@


Collect the common gene expression data-
<<echo=TRUE>>=
index=array(0, dim<-c(nrow(data),1))

for (i in 1: nrow(data)){
  vec <- geneName[i]==probeId3
	index[i]=sum(vec)
}
data=data[which(index!=0),];
probeId=as.matrix(probeId[which(index!=0)]);
geneName=as.matrix(geneName[which(index!=0)],,1);
vars=vars[which(index!=0),];
@

Collect the common gene expression on dataChip-

<<echo=TRUE>>=
index=array(0, dim<-c(nrow(dataChip),1))

for (i in 1: nrow(dataChip)){
	vec <- probeId3[i]==geneName
	index[i]=sum(vec)
}
dataChip=dataChip[which(index!=0),];
probeId3=as.matrix(probeId3[which(index!=0)],,1);
@

Avoid the duplicate entry
<<echo=TRUE>>=
tempIndex= duplicated(geneName)
index=array(0, dim<-c(length(tempIndex),1))

for (i in 1 : length(tempIndex)){
	if (tempIndex[i]=="FALSE"){
		index[i]=1
	}
}
data=data[which(index!=0),];
probeId=as.matrix(probeId[which(index!=0)]);
geneName=as.matrix(geneName[which(index!=0)],,1);
vars=vars[which(index!=0),];

# Rearrange the dataChip data based on data entry
dataChipNew = list()
geneName2 = list()
for (i in 1 : length(geneName)){
	id = which (geneName[i]==probeId3)
	dataChipNew = rbind(dataChipNew,dataChip[id,])
	geneName2 = rbind(geneName2,probeId3[id,])
}

#Create the binary matrix
X= array(0, dim=c(nrow(dataChip),ncol(dataChip)))
I <- c(which(dataChip>0))
X[I] = 1
@

<<echo=TRUE>>=
file="/home/muhammad/Dropbox/CElegans/Connectivity/wTF2.1_test.txt"
dictionaryTF <- read.table(file, header = TRUE, sep = "\t", quote = "", dec = ".", 
                na.strings = "NA", colClasses = NA, nrows = -1, skip = 0, 
                check.names = TRUE, fill = TRUE, strip.white = FALSE, 
                blank.lines.skip = TRUE, comment.char = "#", allowEscapes = FALSE, 
                flush = FALSE)
TransNames = as.matrix(dictionaryTF[,1],,1)
@

Remove the transcription factors (if there any!) which has no evidence to transcribe genes and update the data.
<<echo=TRUE>>=
fakeX = rowSums(X)
X=X[which(fakeX!=0),]
annotation=geneName[which(fakeX!=0),] ### geneName has been renamed.
annotation = matrix(annotation,,1)
data= data[which(fakeX!=0),]
vars= vars[which(fakeX!=0),]
@


Remove the genes which has no evidance to be transcribed by the given transcription factors and update the connectivity matrix.
<<echo=TRUE>>==
effectX=colSums(X)
TransNames=TransNames[which(effectX!=0),]
TransNames=matrix(TransNames,,1)
X=X[,which(effectX!=0)]
@


Collect the number of active genes, transcription factors and assign a variable for the mean value of the transcription factor.
<<echo=TRUE>>=
nGenes= nrow(data)
npts= ncol(data)
nTrans = ncol(X)
muIn = mat.or.vec(nTrans,1)
muIn = matrix(muIn,,1)
@

\section{Reduce the variables}
The connectivity matrix is a huge sparse matrix. \Rfunction{chipReduceVariables} reduce  number of variables in chipDyno model and return the same length integer vectors specifying the row, column 
indices of the non-zero entries and the corresponding value of the of the sparce matrix.
<<echo=TRUE>>=
source('/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/chipReduceVariables.R')
R_C_V_nEffectGenes = chipReduceVariables(X);
R = R_C_V_nEffectGenes[[1]]
C = R_C_V_nEffectGenes[[2]]
V = R_C_V_nEffectGenes[[3]]
nEffectGenes = R_C_V_nEffectGenes[[4]]

diagonal=matrix(mat.or.vec(1,nTrans),1,)
diagonal[,]=0.5
precs_mat=mat.or.vec(nrow(vars),ncol(vars))
precs_mat[,]=1
precs = precs_mat/(vars^2)
beta=3;
gamma=pi/4; # Initialize the degree of temporal continuity
params=matrix(c(beta,gamma,t(muIn),0.1*t(V), diagonal),1,) # Rearran the parameters.
@

Setup the option variables for the Scaled Conjugate gradient optimization. \Rcode{Options[1]} is set to 1 to display error values; If \Rcode{Options[1]} is set to 0, then only warning messages are displayed. \Rcode{Options[2]} is a measure of the absolute precision required for the value of X at the solution.  The condition is satisfied when the absolute difference between the values of X between two successive steps is less than \Rcode{Options[2]}.  \Rcode{Options[3]} is a measure of the precision required of the objective function at the solution.  This condition is satisfied when the absolute difference between the objective function values between two successive steps is less than \Rcode{Options[3]}. Both this and the condition for \Rcode{Options[2]} must be satisfied for termination. \Rcode{Options[14]} is the maximum number of iterations; default value is 100.

<<echo=TRUE>>=
options = array(0, dim=c(1,18))
options[1]=1;
options[2]=0.0001
options[3]=0.0001
options[14]=1500 # No of iteration
options[17]=0.1
@


<<echo=TRUE>>=
#% Temporary load functions
source("/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/chipDynoLikeStatNoise.R")
source("/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/chipDynoLikeStatNoiseGrad.R")
source("/home/muhammad/Dropbox/Git/mlprojects/chipDyno/R/SCGoptimTU.R")
@


\section{Optimization of Likelihood}

\Rcode{chipDynoLikeStat} and \Rcode{chipDynoLikeStatNoise} find out the marginal likelihood for chipDyno dynamical model without and with the uncertainty of the expression level respectively.
The format of the function is-

<<echo=TRUE>>=
options[14]=1000
# CHIPDYNOLIKESTATNOISE marginal likelihood for chipChip dynamical model
# FORMAT chipDynoLikeStatNoise <- function(params,data,precs,X,nEffectGenes,R,C)
# DESC compute the marginal likelihood for chipChip dynamical model
# ARG params: concatenated vector of multiple parameters(beta, gamma, 
# initial mean of the transcription factors, and 
# a vector to create diagonal matrix used to reduce the sparsity of covariance)
# ARG data : point estimate of the expression level
# ARG precs : uncertainty of the expression level
# ARG X : connectivity measurement between genes and transcription factors
# ARG nEffectGenes : effectice gene name
# ARG R, C : same length integer vectors specifying the row and column 
# indices of the non-zero entries of the sparce matrix
# RETURN likelihood : marginal likelihood
@


\section{Gradiant Optimization}

\Rcode{chipDynoLikeStatGrad} and \Rcode{chipDynoLikeStatNoiseGrad} calculate the gradient of  chipDyno dynamical model without and with the uncertainty of the expression level respectively.
The format of the function is-

<<echo=TRUE>>=
options[14]=5
# FORMAT chipDynoLikeStatNoiseGrad <- function(params, data, precs, X, nEffectGenes, R, C)
# DESC compute the gradient of chipDynoLikeStatNoise for chipChip dynamical model
# ARG params: concatenated vector of multiple parameters(beta, gamma, 
# initial mean of the transcription factors, and 
# a vector to create diagonal matrix used to reduce the sparsity of covariance)
# ARG data : point estimate of the expression level
# ARG precs : uncertainty of the expression level
# ARG X : connectivity measurement between genes and transcription factors
# ARG nEffectGenes : effectice gene name
# ARG R, C : same length integer vectors specifying the row and column 
# indices of the non-zero entries of the sparce matrix
# RETURN f : list of beta,gamma, mu, Sigma, diagonal
@


\section{Parameter Optimization}

<<echo=FALSE>>=
params = SCGoptimNoise(params, options, data, precs, X, nEffectGenes, R, C)
@


Add the following to your package \file{DESCRIPTION} file:
\begin{verbatim}
    Suggests: BiocStyle
\end{verbatim}
and this code chunk to the preamble of each vignette:
\begin{verbatim}
    <<style, eval=TRUE, echo=FALSE, results=tex>>=
    BiocStyle::latex()
    @ 
\end{verbatim}
Arguments to \Rfunction{latex} are passed to \Rcode{options}. The default sets \Rcode{width=90}, which is optimal for the default font size 11pt; for smaller/larger font size please consider increasing/decreasing this value.

The style features headers containing the title of the vignette as defined by \verb+\title+. If you wish to override it, e.g.~in the case of long titles, add the following line to the preamble of your vignette:
\begin{verbatim}
    \renewcommand{\thetitle}{Short header title}
\end{verbatim}

\Biocpkg{BiocStyle} automatically attaches the following \LaTeX{} packages: \texttt{color}, \texttt{fancyhdr}, \texttt{geometry}, \texttt{helvet}, \texttt{hyperref}, \texttt{sectsty}, \texttt{Sweave} and \texttt{titling}, so there is no need to reload them with \verb+\usepackage+.

\section{Markup commands}
\Biocpkg{BiocStyle} introduces the following additional markup styling commands useful in typical \Bioconductor{} vignettes.\\\\
%%
Software:
\begin{itemize}
  \item \verb+\R{}+ and \verb+\Bioconductor{}+ to reference \R{} software and the \Bioconductor{} project.
  \exitem{software}{GATK}{to reference third-party software, e.g.,}
\end{itemize}
\vspace{1em}
%%
Packages:
\begin{itemize}
  \exitem{Biocpkg}{IRanges}{for \Bioconductor{} software packages, including a link to the release version landing page,}
  \exitem{Biocannopkg}{org.Hs.eg.db}{for \Bioconductor{} annotation packages, including a link to the release version landing page,}
  \exitem{Biocexptpkg}{parathyroidSE}{for \Bioconductor{} experiment data packages, including a link to the release version landing page,}
  \exitem{CRANpkg}{data.table}{for \R{} packages available on CRAN, including a link to the FHCRC CRAN mirror landing page,}
  \exitem{Rpackage}{MyPkg}{for \R{} packages that are \emph{not} available on \Bioconductor{} or CRAN,}
\end{itemize}
\vspace{1em}
%%
Code:
\begin{itemize}
  \exitem{Rfunction}{findOverlaps}{for functions}
  \exitem{Robject}{olaps}{for variables}
  \exitem{Rclass}{GRanges}{when refering to a formal class}
  \exitem{Rcode}{log(x)}{for \R{} code,}
\end{itemize}
\vspace{1em}
%%
Communication:
\begin{itemize}
  \exitem{comment}{comment to the user}{communicates a}
  \exitem{warning}{common pitfalls}{signals}
  \exitem{fixme}{incomplete functionality}{provides an indication of}
\end{itemize}
\vspace{1em}
%%
General:
\begin{itemize}
  \exitem{email}{user@domain.com}{to provide a linked email address,}
  \exitem{file}{script.R}{for file names and file paths}
\end{itemize}

%---------------------------------------------------------
\section{Sectioning: this is a section}
%---------------------------------------------------------

Use \verb+\tableofcontents+ for a hyperlinked table of contents,
\verb+\section+, \verb+\subsection+, \verb+\subsubsection+ for structuring your vignette.

\subsection{This is a subsection}
Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.

\subsubsection{This is a subsubsection}
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
 
%---------------------------------------------------------
\section{Including a figure}
%---------------------------------------------------------

Besides the usual \LaTeX{} capabilities (\verb+figure+ environment and
\verb+includegraphics+ command), \file{Bioconductor.sty} defines a
shortcut \verb+\incfig{filename}{width}{shorttitle}{extendedcaption}+,
which expects four arguments:
\begin{description}
\item[filename] The name of the figure file, also used as the label by
  which the float can be refered to by \verb+\ref{}+. Some
  \software{Sweave} and \CRANpkg{knitr} options place figures in a
  sub-folder; the sub-folder should be included in the file name.
\item[width] Figure width.
\item[shorttitle] A short description, used in the list of figures and
  printed in bold as the first part of the caption.
\item[extendedcaption] Continuation of the figure caption.
\end{description}
Thus
\begin{verbatim}
    <<figureexample,fig=TRUE,include=FALSE,width=4.2,height=4.6>>=
    v = seq(0, 60i, length=1000)
    plot(abs(v)*exp(v), type="l", col="Royalblue")
    @ 
    \incfig{LatexStyle-figureexample}{0.25\textwidth}{A curve.}
        {The code that creates this figure is shown in the code chunk.}
    as shown in Figure~\ref{LatexStyle-figureexample}.
\end{verbatim}
results in 
<<figureexample,fig=TRUE,include=FALSE,width=4.2,height=4.6>>=
v = seq(0, 60i, length=1000)
plot(abs(v)*exp(v), type="l", col="Royalblue")
@ 
%% 
\incfig{figure/LatexStyle-figureexample.pdf}{0.25\textwidth}{A curve.}{The code
  that creates this figure is shown in the code chunk.}  as shown in
Figure~\ref{LatexStyle-figureexample}. (Use
\verb+\ref{figure/figureexample}+ with \CRANpkg{knitr}).

%---------------------------------------------------------
\section{Session info}
%---------------------------------------------------------
Here is the output of \Rfunction{sessionInfo} on the system on which
this document was compiled:
<<sessionInfo, results=tex, print=TRUE>>=
toLatex(sessionInfo())
@


%\bibliographystyle{abbrv}
%\bibliographystyle{alpha}
\bibliographystyle{apalike}

\bibliography{bib_chipDyno}

\end{document}